import L from "leaflet";
import "leaflet/dist/leaflet.css";
import "leaflet-draw";
import "leaflet-draw/dist/leaflet.draw.css";
import "leaflet-control-geocoder";
import "leaflet-control-geocoder/dist/Control.Geocoder.css";
import React, { useState, useRef } from "react";
import { MapContainer, TileLayer, FeatureGroup, useMapEvents, useMap } from "react-leaflet";
import ZipCodeBar from "./ZipCodeBar";
import ZipPolygons from "./ZipPolygons";
import { findIntersectingZipCodes } from "./utils/geoUtils";
import "./App.css";

function MapSearchControl() {
  const map = useMap();
  React.useEffect(() => {
    if (!map || !window.L.Control.Geocoder) return;
    
    // Store map instance globally
    window.mapInstance = map;
    console.log('Map instance stored:', map);
    
    const geocoder = window.L.Control.geocoder({
      defaultMarkGeocode: false,
      placeholder: "Search location...",
      geocoder: window.L.Control.Geocoder.nominatim(),
    })
      .on("markgeocode", function (e) {
        const bbox = e.geocode.bbox;
        const bounds = L.latLngBounds([
          [bbox.getSouth(), bbox.getWest()],
          [bbox.getNorth(), bbox.getEast()],
        ]);
        map.fitBounds(bounds);
      })
      .addTo(map);
    return () => {
      map.removeControl(geocoder);
    };
  }, [map]);
  return null;
}

function DrawBoundary({ onBoundaryDrawn, onZipCodesFound, onClearDrawing }) {
  const map = useMapEvents({
    click() {},
  });
  const [drawnItems, setDrawnItems] = React.useState(null);
  
  React.useEffect(() => {
    if (!map) return;
    
    const items = new L.FeatureGroup();
    map.addLayer(items);
    setDrawnItems(items);
    
    // Store drawn items globally for clear button access
    window.drawnItems = items;
    
    let isDrawing = false;
    let currentPolyline = null;
    
    const handleDrawCreated = async (e) => {
      items.clearLayers();
      items.addLayer(e.layer);
      const geoJson = e.layer.toGeoJSON();
      if (onBoundaryDrawn) onBoundaryDrawn(geoJson);
      
      try {
        console.log('Drawn polygon GeoJSON:', geoJson);
        const intersectingZips = await findIntersectingZipCodes(geoJson);
        console.log('Found intersecting zip codes:', intersectingZips);
        if (intersectingZips.length > 0 && onZipCodesFound) {
          onZipCodesFound(intersectingZips);
        } else {
          console.log('No intersecting zip codes found');
        }
      } catch (error) {
        console.error('Error finding intersecting zip codes:', error);
      }
    };
    
    // Custom freehand drawing handlers
    const handleMouseDown = (e) => {
      if (!window.freehandDrawing) return;
      
      isDrawing = true;
      items.clearLayers();
      
      currentPolyline = L.polyline([e.latlng], {
        color: '#3388ff',
        weight: 4,
        opacity: 0.8
      }).addTo(items);
    };
    
    const handleMouseMove = (e) => {
      if (!window.freehandDrawing || !isDrawing || !currentPolyline) return;
      currentPolyline.addLatLng(e.latlng);
    };
    
    const handleMouseUp = async (e) => {
      if (!window.freehandDrawing || !isDrawing || !currentPolyline) return;
      
      isDrawing = false;
      window.freehandDrawing = false;
      map.dragging.enable();
      map.getContainer().style.cursor = '';
      
      // Convert polyline to polygon for zip code detection
      const latlngs = currentPolyline.getLatLngs();
      if (latlngs.length > 2) {
        // Close the polygon
        latlngs.push(latlngs[0]);
        
        const polygon = L.polygon(latlngs, {
          color: '#3388ff',
          weight: 4,
          opacity: 0.5,
          fill: true,
          fillOpacity: 0.2
        });
        
        items.clearLayers();
        items.addLayer(polygon);
        
        const geoJson = polygon.toGeoJSON();
        if (onBoundaryDrawn) onBoundaryDrawn(geoJson);
        
        try {
          console.log('Drawn freehand polygon GeoJSON:', geoJson);
          const intersectingZips = await findIntersectingZipCodes(geoJson);
          console.log('Found intersecting zip codes:', intersectingZips);
          if (intersectingZips.length > 0 && onZipCodesFound) {
            onZipCodesFound(intersectingZips);
          } else {
            console.log('No intersecting zip codes found');
          }
        } catch (error) {
          console.error('Error finding intersecting zip codes:', error);
        }
      }
      
      currentPolyline = null;
    };
    
    map.on(L.Draw.Event.CREATED, handleDrawCreated);
    map.on('mousedown', handleMouseDown);
    map.on('mousemove', handleMouseMove);
    map.on('mouseup', handleMouseUp);
    
    return () => {
      map.off(L.Draw.Event.CREATED, handleDrawCreated);
      map.off('mousedown', handleMouseDown);
      map.off('mousemove', handleMouseMove);
      map.off('mouseup', handleMouseUp);
      if (map.hasLayer(items)) {
        map.removeLayer(items);
      }
    };
  }, [map, onBoundaryDrawn, onZipCodesFound]);
  
  return null;
}

// Generate year options with specified intervals
const generateYearOptions = () => {
  const years = [];
  
  // 1900 to 2000 with 20 year intervals
  for (let year = 1900; year <= 2000; year += 20) {
    years.push(year.toString());
  }
  
  // 2000 to 2015 with 5 year intervals
  for (let year = 2000; year <= 2015; year += 5) {
    if (!years.includes(year.toString())) {
      years.push(year.toString());
    }
  }
  
  // 2015 to 2025 with 1 year intervals
  for (let year = 2015; year <= 2025; year += 1) {
    if (!years.includes(year.toString())) {
      years.push(year.toString());
    }
  }
  
  return years.sort((a, b) => parseInt(a) - parseInt(b));
};

// Generate area options from 750 to 10000
const generateAreaOptions = () => {
  const areas = [];
  
  // 750 to 1000 with 50 intervals
  for (let area = 750; area <= 1000; area += 50) {
    areas.push(area.toString());
  }
  
  // 1000 to 2000 with 100 intervals
  for (let area = 1000; area <= 2000; area += 100) {
    if (!areas.includes(area.toString())) {
      areas.push(area.toString());
    }
  }
  
  // 2000 to 5000 with 250 intervals
  for (let area = 2000; area <= 5000; area += 250) {
    if (!areas.includes(area.toString())) {
      areas.push(area.toString());
    }
  }
  
  // 5000 to 10000 with 500 intervals
  for (let area = 5000; area <= 10000; area += 500) {
    if (!areas.includes(area.toString())) {
      areas.push(area.toString());
    }
  }
  
  return areas.sort((a, b) => parseInt(a) - parseInt(b));
};

// Custom Year Input Component
function YearInput({ value, onChange, placeholder, style }) {
  const [inputValue, setInputValue] = useState(value || placeholder);
  const [showDropdown, setShowDropdown] = useState(false);
  const [filteredOptions, setFilteredOptions] = useState([]);
  const yearOptions = generateYearOptions();
  
  React.useEffect(() => {
    if (value && value !== "") {
      setInputValue(value);
    } else if (!inputValue || inputValue === "") {
      setInputValue(placeholder);
    }
  }, [value, placeholder]);
  
  React.useEffect(() => {
    setFilteredOptions(yearOptions);
  }, []);
  
  const handleInputChange = (e) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    setShowDropdown(true);
    
    // Only call onChange if it's a valid year
    if (newValue && yearOptions.includes(newValue)) {
      onChange(newValue);
    } else if (newValue === "") {
      onChange("");
    }
  };
  
  const handleOptionClick = (year) => {
    setInputValue(year);
    onChange(year);
    setShowDropdown(false);
    // Prevent blur from interfering
    setTimeout(() => {}, 0);
  };
  
  const handleFocus = () => {
    setShowDropdown(true);
    // Clear placeholder text when focused
    if (inputValue === placeholder) {
      setInputValue("");
    }
  };
  
  const handleBlur = (e) => {
    // Don't blur if clicking on dropdown option
    if (e.relatedTarget && e.relatedTarget.closest('.dropdown-option')) {
      return;
    }
    
    // Delay hiding dropdown to allow option clicks
    setTimeout(() => {
      setShowDropdown(false);
      // Only reset if input is truly empty
      if (!inputValue || inputValue === "") {
        setInputValue(placeholder);
        onChange("");
      }
    }, 50);
  };
  
  return (
    <div style={{ position: 'relative', ...style }}>
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        onFocus={handleFocus}
        onClick={handleFocus}
        onBlur={handleBlur}
        style={{ 
          width: style?.width || '100px', 
          padding: '4px 8px', 
          border: '2px solid #475569', 
          borderRadius: '8px', 
          fontSize: '12px', 
          background: '#1e293b', 
          color: inputValue === placeholder ? '#94a3b8' : '#e2e8f0',
          cursor: 'pointer'
        }}
        readOnly={false}
      />
      {showDropdown && filteredOptions.length > 0 && (
        <div style={{
          position: 'absolute',
          top: '100%',
          left: 0,
          right: 0,
          backgroundColor: '#1e293b',
          border: '2px solid #475569',
          borderRadius: '8px',
          maxHeight: '150px',
          overflowY: 'auto',
          zIndex: 1000,
          marginTop: '2px'
        }}>
          {filteredOptions.map(year => (
            <div
              key={year}
              className="dropdown-option"
              onMouseDown={(e) => {
                e.preventDefault(); // Prevent blur
                handleOptionClick(year);
              }}
              style={{
                padding: '6px 8px',
                cursor: 'pointer',
                fontSize: '12px',
                color: '#e2e8f0',
                backgroundColor: inputValue === year ? '#475569' : 'transparent'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#475569'}
              onMouseLeave={(e) => e.target.style.backgroundColor = inputValue === year ? '#475569' : 'transparent'}
            >
              {year}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// Custom Area Input Component
function AreaInput({ value, onChange, placeholder, style }) {
  const [inputValue, setInputValue] = useState(value || placeholder);
  const [showDropdown, setShowDropdown] = useState(false);
  const [filteredOptions, setFilteredOptions] = useState([]);
  const areaOptions = generateAreaOptions();
  
  React.useEffect(() => {
    if (value && value !== "") {
      setInputValue(value.toString());
    } else if (!inputValue || inputValue === "") {
      setInputValue(placeholder);
    }
  }, [value, placeholder]);
  
  React.useEffect(() => {
    setFilteredOptions(areaOptions);
  }, []);
  
  const handleInputChange = (e) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    setShowDropdown(true);
    
    // Only call onChange if it's a valid area
    if (newValue && areaOptions.includes(newValue)) {
      onChange(parseInt(newValue));
    } else if (newValue === "") {
      onChange("");
    }
  };
  
  const handleOptionClick = (area) => {
    setInputValue(area);
    onChange(parseInt(area));
    setShowDropdown(false);
  };
  
  const handleFocus = () => {
    setShowDropdown(true);
    // Clear placeholder text when focused
    if (inputValue === placeholder) {
      setInputValue("");
    }
  };
  
  const handleBlur = (e) => {
    // Don't blur if clicking on dropdown option
    if (e.relatedTarget && e.relatedTarget.closest('.dropdown-option')) {
      return;
    }
    
    // Delay hiding dropdown to allow option clicks
    setTimeout(() => {
      setShowDropdown(false);
      // Only reset if input is truly empty
      if (!inputValue || inputValue === "") {
        setInputValue(placeholder);
        onChange("");
      }
    }, 50);
  };
  
  return (
    <div style={{ position: 'relative', ...style }}>
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        onFocus={handleFocus}
        onClick={handleFocus}
        onBlur={handleBlur}
        style={{ 
          width: style?.width || '100px', 
          padding: '4px 8px', 
          border: '2px solid #475569', 
          borderRadius: '8px', 
          fontSize: '12px', 
          background: '#1e293b', 
          color: inputValue === placeholder ? '#94a3b8' : '#e2e8f0',
          cursor: 'pointer'
        }}
        readOnly={false}
      />
      {showDropdown && filteredOptions.length > 0 && (
        <div style={{
          position: 'absolute',
          top: '100%',
          left: 0,
          right: 0,
          backgroundColor: '#1e293b',
          border: '2px solid #475569',
          borderRadius: '8px',
          maxHeight: '150px',
          overflowY: 'auto',
          zIndex: 1000,
          marginTop: '2px'
        }}>
          {filteredOptions.map(area => (
            <div
              key={area}
              className="dropdown-option"
              onMouseDown={(e) => {
                e.preventDefault(); // Prevent blur
                handleOptionClick(area);
              }}
              style={{
                padding: '6px 8px',
                cursor: 'pointer',
                fontSize: '12px',
                color: '#e2e8f0',
                backgroundColor: inputValue === area ? '#475569' : 'transparent'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#475569'}
              onMouseLeave={(e) => e.target.style.backgroundColor = inputValue === area ? '#475569' : 'transparent'}
            >
              {area} sq ft
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

function App() {
  const [zipInput, setZipInput] = useState("");
  const [selectedZips, setSelectedZips] = useState([]); // [{zip, geojson, bounds}]
  const [budgetMin, setBudgetMin] = useState("");
  const [budgetMax, setBudgetMax] = useState("");
  const [budgetMinInput, setBudgetMinInput] = useState("No min");
  const [budgetMaxInput, setBudgetMaxInput] = useState("No max");
  const [boundary, setBoundary] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [showDetailedOptions, setShowDetailedOptions] = useState(false);
  const [constructionYearMin, setConstructionYearMin] = useState("");
  const [constructionYearMax, setConstructionYearMax] = useState("");
  const [bedrooms, setBedrooms] = useState("any");
  const [houseAreaMin, setHouseAreaMin] = useState("");
  const [houseAreaMax, setHouseAreaMax] = useState("");
  const [showAllZips, setShowAllZips] = useState(false);
  
  const minSliderRef = useRef(null);
  const maxSliderRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowResults(true);
  };

  const handleToggleDetails = () => {
    if (showDetailedOptions) {
      // Hide details and clear inputs - let model pick best answers
      setConstructionYearMin("");
      setConstructionYearMax("");
      setBedrooms("any");
      setHouseAreaMin("");
      setHouseAreaMax("");
    }
    setShowDetailedOptions(!showDetailedOptions);
  };

  const handleZipCodesFound = (newZips) => {
    setSelectedZips(currentZips => {
      // Get existing zip codes for duplicate checking
      const existingZipCodes = new Set(currentZips.map(z => typeof z === 'string' ? z : z.zip));
      
      // Filter out duplicates and add new zip objects
      const uniqueNewZips = newZips.filter(z => !existingZipCodes.has(z.zip));
      
      return [...currentZips, ...uniqueNewZips];
    });
  };

  const handleClearDrawing = () => {
    // Clear selected zip codes
    setSelectedZips([]);
    // Clear boundary as well
    setBoundary(null);
    // Clear the drawn items from the map
    if (window.mapInstance && window.drawnItems) {
      window.drawnItems.clearLayers();
    }
  };

  return (
    <div className="main-container">
      <header>
        <h1>Find the Best Investment Properties</h1>
        <p>Draw your area of interest or enter a zip code, and tell us your investment preferences.</p>
      </header>
      <div className="content">
        <div className="map-section">
          <div style={{ position: 'relative', height: '100%' }}>
            <MapContainer
              center={[35.2271, -80.8431]}
              zoom={10}
              style={{ height: "100%", width: "100%" }}
              zoomControl={false}
            >
              <TileLayer url="https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png" attribution="&copy; <a href='https://carto.com/attributions'>CARTO</a>" />
              <MapSearchControl />
              <ZipPolygons selectedZips={selectedZips} />
              <FeatureGroup>{<DrawBoundary onBoundaryDrawn={setBoundary} onZipCodesFound={handleZipCodesFound} onClearDrawing={handleClearDrawing} />}</FeatureGroup>
            </MapContainer>
            
            {/* Zip Code Search - Top Center */}
            <div style={{ 
              position: 'absolute', 
              top: '10px', 
              left: '50%',
              transform: 'translateX(-50%)',
              zIndex: 1000, 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center',
              gap: '8px', 
              width: '100%',
              maxWidth: '300px',
              padding: '0 10px',
              boxSizing: 'border-box'
            }}>
              <ZipCodeBar
                selectedZips={selectedZips}
                setSelectedZips={setSelectedZips}
                zipInput={zipInput}
                setZipInput={setZipInput}
              />
              
              {/* Selected Zip Codes Display */}
              {selectedZips.length > 0 && (
                <div className="zip-results-section" style={{ 
                  display: 'flex', 
                  flexWrap: 'wrap', 
                  gap: '6px', 
                  justifyContent: 'center',
                  marginTop: '8px',
                  maxWidth: '100%',
                  overflow: 'hidden'
                }}>
                  {(showAllZips ? selectedZips : selectedZips.slice(0, 3)).map((zip, index) => (
                    <div
                      key={typeof zip === 'string' ? zip : zip.zip}
                      style={{
                        backgroundColor: 'rgba(59, 130, 246, 0.9)',
                        color: 'white',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        fontSize: '12px',
                        fontWeight: 'bold',
                        textAlign: 'center',
                        width: '80px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '4px'
                      }}
                    >
                      <span>{typeof zip === 'string' ? zip : zip.zip}</span>
                      <button
                        onClick={() => {
                          const zipCode = typeof zip === 'string' ? zip : zip.zip;
                          setSelectedZips(zips => zips.filter(z => (typeof z === 'string' ? z : z.zip) !== zipCode));
                        }}
                        style={{
                          background: 'none',
                          border: 'none',
                          color: 'white',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: 'bold',
                          padding: '0',
                          width: '16px',
                          height: '16px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          borderRadius: '50%',
                          backgroundColor: 'rgba(255, 255, 255, 0.2)'
                        }}
                        onMouseOver={(e) => e.target.style.backgroundColor = 'rgba(255, 255, 255, 0.3)'}
                        onMouseOut={(e) => e.target.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}
                      >
                        ×
                      </button>
                    </div>
                  ))}
                  {selectedZips.length > 3 && (
                    <div
                      onClick={() => setShowAllZips(!showAllZips)}
                      style={{
                        backgroundColor: 'rgba(100, 116, 139, 0.9)',
                        color: 'white',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        fontSize: '12px',
                        fontWeight: 'bold',
                        textAlign: 'center',
                        minWidth: '60px',
                        cursor: 'pointer'
                      }}
                      onMouseOver={(e) => e.target.style.backgroundColor = 'rgba(100, 116, 139, 1)'}
                      onMouseOut={(e) => e.target.style.backgroundColor = 'rgba(100, 116, 139, 0.9)'}
                    >
                      {showAllZips ? 'Show less' : `+${selectedZips.length - 3} more`}
                    </div>
                  )}
                </div>
              )}
            </div>
            
            {/* Zoom Controls - Top Left (below search) */}
            <div style={{ position: 'absolute', top: '60px', left: '10px', zIndex: 1000, display: 'flex', flexDirection: 'column', gap: '5px' }}>
              <button 
                onClick={() => {
                  console.log('Zoom in clicked, mapInstance:', window.mapInstance);
                  if (window.mapInstance) {
                    window.mapInstance.zoomIn();
                    console.log('Zoom in executed');
                  } else {
                    console.log('No mapInstance found');
                  }
                }}
                style={{
                  width: '34px',
                  height: '34px',
                  backgroundColor: 'white',
                  border: '2px solid rgba(0,0,0,0.2)',
                  borderRadius: '4px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
              >+</button>
              <button 
                onClick={() => {
                  if (window.mapInstance) {
                    window.mapInstance.zoomOut();
                  }
                }}
                style={{
                  width: '34px',
                  height: '34px',
                  backgroundColor: 'white',
                  border: '2px solid rgba(0,0,0,0.2)',
                  borderRadius: '4px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
              >−</button>
            </div>
            
            {/* Drawing Tools - Below Zoom Controls */}
            <div style={{ position: 'absolute', top: '140px', left: '10px', zIndex: 1000, display: 'flex', flexDirection: 'column', gap: '5px' }}>
              <button 
                onClick={() => {
                  if (window.mapInstance) {
                    // Enable freehand drawing mode
                    window.freehandDrawing = true;
                    window.mapInstance.dragging.disable();
                    window.mapInstance.getContainer().style.cursor = 'crosshair';
                  }
                }}
                style={{
                  width: '34px',
                  height: '34px',
                  backgroundColor: 'white',
                  border: '2px solid rgba(0,0,0,0.2)',
                  borderRadius: '4px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: '#333'
                }}
                title="Free Hand Draw"
              >✏️</button>
            </div>
            
            {/* Clear Boundary Button - Bottom Left (only when zip codes selected) */}
            {selectedZips.length > 0 && (
              <div style={{ position: 'absolute', bottom: '10px', left: '10px', zIndex: 1000 }}>
                <button 
                  onClick={handleClearDrawing}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#dc3545',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    cursor: 'pointer',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
                  }}
                  title="Clear selected zip codes and boundary"
                >
                  Clear Boundary
                </button>
              </div>
            )}
          </div>
        </div>
        <form className="prefs-form" onSubmit={handleSubmit}>
          <label>
            Budget Range:
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <input
                type="text"
                value={budgetMinInput}
                onChange={(e) => {
                  const rawValue = e.target.value;
                  setBudgetMinInput(rawValue);
                  
                  // Parse the number for validation
                  const numValue = parseInt(rawValue.replace(/[^0-9]/g, '')) || 0;
                  if (numValue > 0) {
                    setBudgetMin(numValue);
                  } else if (rawValue === "") {
                    setBudgetMin("");
                  }
                }}
                onFocus={() => {
                  if (budgetMinInput === "No min") {
                    setBudgetMinInput("");
                  }
                }}
                onBlur={() => {
                  if (!budgetMinInput || budgetMinInput === "") {
                    setBudgetMinInput("No min");
                    setBudgetMin("");
                  } else {
                    const numValue = parseInt(budgetMinInput.replace(/[^0-9]/g, '')) || 0;
                    if (numValue > 0) {
                      setBudgetMin(numValue);
                      setBudgetMinInput(numValue.toLocaleString());
                    } else {
                      setBudgetMinInput("No min");
                      setBudgetMin("");
                    }
                  }
                }}
                style={{ 
                  width: '170px', 
                  padding: '4px', 
                  fontSize: '12px',
                  color: budgetMinInput === "No min" ? '#94a3b8' : '#e2e8f0'
                }}
              />
              <span style={{ color: '#e2e8f0', fontSize: '12px' }}>-</span>
              <input
                type="text"
                value={budgetMaxInput}
                onChange={(e) => {
                  const rawValue = e.target.value;
                  setBudgetMaxInput(rawValue);
                  
                  // Parse the number for validation
                  const numValue = parseInt(rawValue.replace(/[^0-9]/g, '')) || 0;
                  if (numValue > 0) {
                    setBudgetMax(numValue);
                  } else if (rawValue === "") {
                    setBudgetMax("");
                  }
                }}
                onFocus={() => {
                  if (budgetMaxInput === "No max") {
                    setBudgetMaxInput("");
                  }
                }}
                onBlur={() => {
                  if (!budgetMaxInput || budgetMaxInput === "") {
                    setBudgetMaxInput("No max");
                    setBudgetMax("");
                  } else {
                    const numValue = parseInt(budgetMaxInput.replace(/[^0-9]/g, '')) || 0;
                    if (numValue > 0) {
                      setBudgetMax(numValue);
                      setBudgetMaxInput(numValue.toLocaleString());
                    } else {
                      setBudgetMaxInput("No max");
                      setBudgetMax("");
                    }
                  }
                }}
                style={{ 
                  width: '170px', 
                  padding: '4px', 
                  fontSize: '12px',
                  color: budgetMaxInput === "No max" ? '#94a3b8' : '#e2e8f0'
                }}
              />
            </div>
          </label>
          <label>
            Investment Horizon:
            <select>
              <option value="short">Short term (1-3 years)</option>
              <option value="mid">Mid term (3-5 years)</option>
              <option value="long">Long term (+5 years)</option>
            </select>
          </label>
          <label>
            Property Type:
            <select>
              <option value="any">Any</option>
              <option value="residential">Residential</option>
              <option value="commercial">Commercial</option>
              <option value="multi-family">Multi-Family</option>
            </select>
          </label>
          
          {/* Toggle details button */}
          <button 
            type="button"
            onClick={handleToggleDetails}
            style={{
              width: '100%',
              padding: '12px 16px',
              backgroundColor: showDetailedOptions ? '#3b82f6' : '#475569',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontSize: '14px',
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            {showDetailedOptions ? 'Use smart defaults' : 'I want to add more details'}
          </button>

          {/* Show best options button - appears when details are hidden */}
          {!showDetailedOptions && (
            <button 
              type="button"
              onClick={(e) => {
                handleSubmit(e);
              }}
              style={{
                width: '100%',
                padding: '12px 16px',
                backgroundColor: '#0ea5e9',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: 'bold',
                cursor: 'pointer'
              }}
            >
              See my best investment options
            </button>
          )}

          {/* Detailed options - shown only when requested */}
          {showDetailedOptions && (
            <div style={{ padding: '12px', backgroundColor: '#334155', borderRadius: '8px', border: '1px solid #475569' }}>
              <div style={{ display: 'flex', gap: '8px', alignItems: 'flex-start' }}>
                <div style={{ flex: 1 }}>
                  <div style={{ display: 'flex', justifyContent: 'flex-start' }}>
                    <label style={{ marginBottom: '4px', fontSize: '14px', color: '#e2e8f0' }}>Construction Year:</label>
                  </div>
                  <div style={{ display: 'flex', gap: '4px', justifyContent: 'flex-start' }}>
                    <YearInput
                      value={constructionYearMin}
                      onChange={setConstructionYearMin}
                      placeholder="No min"
                      style={{ width: '75px' }}
                    />
                    <YearInput
                      value={constructionYearMax}
                      onChange={setConstructionYearMax}
                      placeholder="No max"
                      style={{ width: '75px' }}
                    />
                  </div>
                </div>
                <div style={{ flex: 1 }}>
                  <div style={{ display: 'flex', justifyContent: 'flex-start' }}>
                    <label style={{ marginBottom: '4px', fontSize: '14px', color: '#e2e8f0' }}>House Area (sq ft):</label>
                  </div>
                  <div style={{ display: 'flex', gap: '4px', justifyContent: 'flex-end' }}>
                    <AreaInput
                      value={houseAreaMin}
                      onChange={setHouseAreaMin}
                      placeholder="No min"
                      style={{ width: '75px' }}
                    />
                    <AreaInput
                      value={houseAreaMax}
                      onChange={setHouseAreaMax}
                      placeholder="No max"
                      style={{ width: '75px' }}
                    />
                  </div>
                </div>
              </div>
              <label style={{ marginTop: '16px' }}>
                Number of Bedrooms:
                <select value={bedrooms} onChange={(e) => setBedrooms(e.target.value)}>
                  <option value="any">Any</option>
                  <option value="1">1 Bedroom</option>
                  <option value="2">2 Bedrooms</option>
                  <option value="3">3 Bedrooms</option>
                  <option value="4">4 Bedrooms</option>
                  <option value="5">5+ Bedrooms</option>
                </select>
              </label>
            </div>
          )}
          
          {/* Show best options button - appears at bottom when details are shown */}
          {showDetailedOptions && (
            <button 
              type="button"
              onClick={(e) => {
                handleSubmit(e);
              }}
              style={{
                width: '100%',
                padding: '12px 16px',
                backgroundColor: '#0ea5e9',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: 'bold',
                cursor: 'pointer'
              }}
            >
              See my best investment options
            </button>
          )}
        </form>
      </div>
      {showResults && (
        <section className="results-placeholder">
          <h2>Filtered Investment Properties</h2>
          <p>Results will appear here after API integration.</p>
        </section>
      )}
    </div>
  );
}

export default App;
